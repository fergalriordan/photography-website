---
interface Photo {
  src: string;
  alt?: string;
}

const { photosEager = [] as Photo[], photosLazy = [] as Photo[] } = Astro.props;
---

<div class="columns-3 gap-2 px-5">
  {photosEager.map(({ src, alt }: Photo, i: number) => (
    <img
      src={src}
      alt={alt || `Photo ${i + 1}`}
      loading="eager"
      class="mb-2 w-full break-inside-avoid rounded-md shadow-sm"
    />
  ))}
</div>

{/* Lazy photos container, initially hidden */}
<div id="lazyPhotos" class="columns-3 gap-2 px-5 hidden">
  {photosLazy.map(({ src, alt }: Photo, i: number) => (
    <img
      src={src}
      alt={alt || `Photo ${photosEager.length + i + 1}`}
      loading="lazy"
      class="mb-2 w-full break-inside-avoid rounded-md shadow-sm"
    />
  ))}
</div>

<div class="flex justify-center mt-6 mb-8">
  <button
    id="showMoreBtn"
    class="px-6 py-3 rounded-full bg-[rgb(var(--gray))] text-white font-semibold shadow hover:bg-[rgb(var(--gray-dark))] transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-[rgb(var(--accent))]"
    aria-expanded="false"
    aria-controls="lazyPhotos"
  >
    Show More
  </button>
</div>

<script>
  const btn = document.getElementById('showMoreBtn');
  const lazyPhotos = document.getElementById('lazyPhotos');

  btn.addEventListener('click', () => {
    const isHidden = lazyPhotos.classList.contains('hidden');
    if (isHidden) {
      lazyPhotos.classList.remove('hidden');
      btn.textContent = 'Show Less';
      btn.setAttribute('aria-expanded', 'true');
    } else {
      lazyPhotos.classList.add('hidden');
      btn.textContent = 'Show More';
      btn.setAttribute('aria-expanded', 'false');
      // Optionally scroll to top of photos when collapsing:
      // lazyPhotos.scrollIntoView({ behavior: 'smooth' });
    }
  });
</script>
